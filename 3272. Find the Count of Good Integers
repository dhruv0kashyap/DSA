class Solution {
  public String sort(String s) {
    char[] c = s.toCharArray();
    Arrays.sort(c);
    return new String(c);
  }

  public long countGoodIntegers(int n, int k) {
    if (n == 1) {
      long res = 0;
      for (int i = 1; i < 10; ++i) {
        if (i % k == 0) {
          ++res;
        }
      }

      return res;
    }

    int half = n / 2;
    long frontMax = (long) Math.pow(10, half);
    long frontMin = frontMax / 10;
    StringBuilder rev = new StringBuilder(10);
    StringBuilder sb = new StringBuilder(10);
    Set<String> nums = new HashSet<>();
    for (long front = frontMin; front < frontMax; ++front) {
      rev.setLength(0);
      rev.append(front);
      rev.reverse();

      if (n % 2 == 1) {
        sb.setLength(0);
        sb.append(front);
        sb.append('0');
        sb.append(rev);
        for (int i = 0; i <= 9; ++i) {
          sb.setCharAt(rev.length(), (char) (i + '0'));
          String num = sb.toString();
          if (Long.parseLong(num) % k == 0) {
            nums.add(sort(num));
          }
        }
      } else {
        String num = front + rev.toString();
        if (Long.parseLong(num) % k == 0) {
          nums.add(sort(num));
        }
      }
    }

    long res = 0;
    int[] counts = new int[10];
    long[] fact = new long[11];
    fact[0] = 1;
    for (int i = 1; i <= 10; ++i) {
      fact[i] = fact[i - 1] * i;
    }

    for (String num : nums) {
      for (int i = 0; i < 10; ++i) {
        counts[i] = 0;
      }
      for (int i = 0; i < num.length(); ++i) {
        ++counts[num.charAt(i) - '0'];
      }


      long cur = fact[num.length() - 1] * (num.length() - counts[0]);
      for (int c : counts) {
        cur /= fact[c];
      }

      res += cur;
    }

    return res;
  }
}
